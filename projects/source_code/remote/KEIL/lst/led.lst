C51 COMPILER V9.60.7.0   LED                                                               09/23/2024 15:26:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Output\led.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\led.c LARGE OMF2 OPTIMIZE(1,SPEED) BROWSE INCDIR(..\..\..\..\Library\
                    -Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\lst\led.lst) TABS(2) OBJECT(.\Output\led.obj)

line level    source

   1          /*
   2           * led.c
   3           *
   4           * Copyright 2014 Edward V. Emelianoff <eddy@sao.ru>
   5           *
   6           * This program is free software; you can redistribute it and/or modify
   7           * it under the terms of the GNU General Public License as published by
   8           * the Free Software Foundation; either version 2 of the License, or
   9           * (at your option) any later version.
  10           *
  11           * This program is distributed in the hope that it will be useful,
  12           * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14           * GNU General Public License for more details.
  15           *
  16           * You should have received a copy of the GNU General Public License
  17           * along with this program; if not, write to the Free Software
  18           * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  19           * MA 02110-1301, USA.
  20           */
  21          
  22          #include "numicro_8051.h"
*** WARNING C320 IN LINE 576 OF \nuvoton\remote_keil\Library\Device\Include\function_define_N76E003.h: "Taken from other
             - CPU!!! May not work"
  23          #include "led.h"
  24          
  25          /*
  26           * bits no     7   6   5   4   3   2   1   0
  27           * dec value  128  64  32  16  8   4   2   1
  28           */
  29          
  30          /********** one variant **********/
  31          /*
  32           * One digit:                          TABLE:
  33           *   ***A***                   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F - h
  34           *   *     *         (A) PB4   0  1  0  0  1  0  0  0  0  0  0  1  0  1  0  0 1 1
  35           *   F     B         (F) PB5   0  1  1  1  0  0  0  1  0  0  0  0  0  1  0  0 1 0
  36           *   *     *         (B) PC5   0  0  0  0  0  1  1  0  0  0  0  1  1  0  1  1 1 1
  37           *   ***G***         (G) PC6   1  1  0  0  0  0  0  1  0  0  0  0  1  0  0  0 0 0
  38           *   *     *         (C) PC7   0  0  1  0  0  0  0  0  0  0  0  0  1  0  1  1 1 0
  39           *   E     C         (E) PD1   0  1  0  1  1  1  0  1  0  1  0  0  0  0  0  0 1 0
  40           *   *     *   **    (D) PD2   0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  1 1 1
  41           *   ***D***  *DP*   (DP)PD3   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 1 1
  42           *             **
  43           */
  44          /*
  45          // PB, mask: 0x30, PB4: 0x10, PB5: 0x20
  46          #define PB_BLANK 0x30
  47          static U8 PB_bits[18] = {0,0x30,0x20,0x20,0x10,0,0,0x20,0,0,0,0x10,0,0x30,0,0,0x30,0x10};
  48          // PC, mask: 0xe0, PC5: 0x20, PC6: 0x40, PC7: 0x80
  49          #defin PC_BLANK 0xe0
  50          static U8 PC_bits[18] = {0x40,0x40,0x80,0,0,0x20,0x20,0x40,0,0,0,0x20,0xe0,0,0xa0,0xa0,0xa0,0x20};
  51          // PD, mask: 0x0e, PD1: 0x02, PD2: 0x04, PD3: 0x08
  52          #define PD_BLANK 0x0e
C51 COMPILER V9.60.7.0   LED                                                               09/23/2024 15:26:19 PAGE 2   

  53          static U8 PD_bits[18] = {0x08,0x0e,0x08,0x0a,0x0e,0x0a,0x08,0x0e,0x08,0x0a,0x0c,0x8,0x08,0x08,0x08,0x0c,0x
             -0e,0x0c};
  54          */
  55          /*
  56           * Number of digit on indicator with common anode
  57           * digis 0..3: PC3, PC4, PA3, PD4
  58           */
  59          
  60          
  61          /********** current variant **********/
  62          /*
  63           * One digit:                          TABLE:
  64           *   ***A***                   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  -  h
  65           *   *     *         (F) PA1   0  1  1  1  0  0  0  1  0  0  0  0  0  1  0  0  1  0
  66           *   F     B         (B) PB4   0  0  0  0  0  1  1  0  0  0  0  1  1  0  1  1  1  1
  67           *   *     *         (A) PB5   0  1  0  0  1  0  0  0  0  0  0  1  0  1  0  0  1  1
  68           *   ***G***         (G) PC3   1  1  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0
  69           *   *     *         (C) PC4   0  0  1  0  0  0  0  0  0  0  0  0  1  0  1  1  1  0
  70           *   E     C         (DP)PC5   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
  71           *   *     *   **    (D) PC6   0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  1  1  1
  72           *   ***D***  *DP*   (E) PC7   0  1  0  1  1  1  0  1  0  1  0  0  0  0  0  0  1  0
  73           *             **
  74           */
  75          
  76          /*
  77           * Number of digit on indicator with common anode
  78           * digis 0..3: PA3, PD6, PD4, PD1
  79           */
  80          
  81          /************* arrays for ports *************/
  82          static const U8 LED_bits[18] = {0xfe,0x30,0xed,0xf9,0x33,0xdb,0xdf,0xf0,0xff,0xfb,
  83                                    0xf7,0x3f,0x0d,0x3d,0xcf,0xe7,0x01,0};
  84          
  85          /**
  86           * Turn on anode power for digit N (0..3: PA3, PD6, PD4, PD1 -- A0x08, D0x40, D0x10, D0x02)
  87           * @param N - number of digit (0..3), if other - no action (display off)
  88           * @return
  89           */
  90          void light_up_digit(U8 N){
  91   1        switch(N){
  92   2          case 0:
  93   2             P01 = 0; // Digit 1
  94   2          break;
  95   2          case 1:
  96   2             P12 = 0; // Digit 2
  97   2          break;
  98   2          case 2: 
  99   2             P04 = 1; // Digit 3
 100   2          break;
 101   2          case 3:
 102   2             P11 = 1; // Digit 4
 103   2          break;
 104   2          case 4:
 105   2             P03 = 0; // Digit 5
 106   2          break;
 107   2          case 5:
 108   2             P00 = 0; // Digit 6
 109   2          break;
 110   2        }
 111   1      }
 112          
 113          void light_off_digit(U8 N){
C51 COMPILER V9.60.7.0   LED                                                               09/23/2024 15:26:19 PAGE 3   

 114   1        switch(N){
 115   2          case 0:
 116   2             P01 = 1; // Digit 1
 117   2          break;
 118   2          case 1:
 119   2             P12 = 1; // Digit 2
 120   2          break;
 121   2          case 2:
 122   2             P04 = 0; // Digit 3
 123   2          break;
 124   2          case 3:
 125   2             P11 = 0; // Digit 4
 126   2          break;
 127   2          case 4:
 128   2             P03 = 1; // Digit 5
 129   2          break;
 130   2          case 5:
 131   2             P00 = 1; // Digit 6
 132   2          break;
 133   2        }
 134   1      }
 135          
 136          
 137          static U8 display_buffer[6] = {' ',' ',' ',' ',' ',' '}; // blank by default
 138          U8 N_current = 0; // current digit to display
 139          
 140          /**
 141           * fills buffer to display
 142           * @param str - string to display, contains "0..f" for digits, " " for space, "." for DP
 143           *        for example: " 1.22" or "h1ab" (something like "0...abc" equivalent to "0.abc"
 144           *        register independent!
 145           *      any other letter would be omitted
 146           *      if NULL - fill buffer with spaces
 147           */
 148          void set_display_buf(char *str){
 149   1        U8 B[4];
 150   1        signed char ch, M = 0, i;
 151   1        //N_current = 0; // refresh current digit number
 152   1        // empty buffer
 153   1        for(i = 0; i < 6; i++)
 154   1          display_buffer[i] = ' ';
 155   1        if(!str) return;
 156   1        i = 0;
 157   1        for(;(ch = *str) && (i < 6); str++){
 158   2          M = 0;
 159   2          if(ch > '/' && ch < ':'){ // digit
 160   3            M = '0';
 161   3          }else if(ch > '`' & ch < 'g'){ // a..f
 162   3            M = 'a' - 10;
 163   3          }else if(ch > '@' & ch < 'G'){ // A..F
 164   3            M = 'A' - 10;
 165   3          }else if(ch == '-'){ // minus
 166   3            M = '-' - 16;
 167   3          }else if(ch == 'h'){ // hex
 168   3            M = 'h' - 17;
 169   3          }else if(ch == 'H'){ // hex
 170   3            M = 'H' - 17;
 171   3          }else if(ch == '.'){ // DP, set it to previous char
 172   3            if(i == 0){ // word starts from '.' - make a space with point
 173   4              B[0] = 0xff;
 174   4            }else{ // set point for previous character
 175   4              B[i-1] |= 0x80;
C51 COMPILER V9.60.7.0   LED                                                               09/23/2024 15:26:19 PAGE 4   

 176   4            }
 177   3            continue;
 178   3          }else if(ch != ' '){ // bad character - continue
 179   3            continue;
 180   3          }
 181   2          B[i] = ch - M;
 182   2          i++;
 183   2        }
 184   1        // now make align to right
 185   1        ch = 5;
 186   1        for(M = i-1; M > -1; M--, ch--){
 187   2          display_buffer[ch] = B[M];
 188   2        }
 189   1      }
 190          
 191          /**
 192           * Show Nth digit of buffer (function ran by timer)
 193           * @param N - number of digit in buffer (0..3)
 194           */
 195          /**
 196          * Setup for writing a letter
 197          * @param ltr - letter (0..17 for 0..F, - or h | 0x80 for DP, any other value for 'space')
 198          */
 199          void show_buf_digit(U8 N){
 200   1        U8 L;
 201   1        U8 i;
 202   1        U8 b = 0;
 203   1      
 204   1        if(N > 5) return;
 205   1        if(N == 2 || N == 3) {
 206   2          b = 1;
 207   2        }
 208   1      //  write_letter(display_buffer[N]);
 209   1        L = display_buffer[N] & 0x7f;
 210   1      //  all_digits_off();
 211   1        if(L < 18){ // letter
 212   2          L = LED_bits[L];
 213   2        }else{ // space
 214   2          L = 0;
 215   2        }
 216   1        if(N == 0) {
 217   2          light_off_digit(5);
 218   2        }
 219   1        else {
 220   2          light_off_digit(N-1);
 221   2        }
 222   1        for (i = 0; i<7; i++)
 223   1        {
 224   2          CLOCK = 0; // Clear CLK
 225   2      //    _asm("nop");
 226   2      //    _asm("nop");
 227   2          if((L>>i) & 1)
 228   2          {
 229   3            DATA = !b; // Set LED on
 230   3          }
 231   2          else
 232   2          {
 233   3            DATA = b; // Set LED OFF
 234   3          }
 235   2          CLOCK = 1; // Set CLK - rising edge transfers data
 236   2      //    _asm("nop");
 237   2      //    _asm("nop");
C51 COMPILER V9.60.7.0   LED                                                               09/23/2024 15:26:19 PAGE 5   

 238   2        }
 239   1      
 240   1        light_up_digit(N);
 241   1      }
 242          
 243          /**
 244           * Show next digit - function calls from main() by some system time value amount
 245           */
 246          void show_next_digit(void){
 247   1        show_buf_digit(N_current++);
 248   1        if(N_current > 5) N_current = 0;
 249   1      }
 250          
 251          
 252          
 253          /**
 254           * convert integer value in into string and display it
 255           * @param i - value to display, -999999 <= i <= 999999, if wrong, displays "---E"
 256           */
 257          void display_int(S32 I){
 258   1        signed char rem;
 259   1        signed char i;
 260   1        signed char sign = 0;
 261   1        if(I < -999999 || I > 999999){
 262   2          set_display_buf("--EE--");
 263   2          return;
 264   2        }
 265   1      //  set_display_buf(NULL); // empty buffer
 266   1        for(i = 0; i < 6; i++)
 267   1          display_buffer[i] = 0;
 268   1        if(I == 0){ // just show zero
 269   2          return;
 270   2        }
 271   1        if(I < 0){
 272   2          sign = 1;
 273   2          I *= -1;
 274   2        }
 275   1        for (i = 0; i < 6; i++)
 276   1        {
 277   2          rem = I - (I/10)*10;
 278   2          display_buffer[5-i] = rem; //rem;
 279   2          I = I/10;
 280   2          if(I == 0) break;
 281   2        }
 282   1        if(sign && i < 6) display_buffer[5-i] = 16; // minus sign
 283   1      }
 284          
 285          
 286          /**
 287           * convert integer value in seconds and minutes into string and display it
 288           * @param i - value to display, -999 <= i <= 9999, if wrong, displays "---E"
 289           */
 290          void display_int_sec(S32 I){
 291   1        S32 rem;
 292   1        signed char i;
 293   1        signed char N = 5;
 294   1      
 295   1        for(i = 0; i < 6; i++)
 296   1          display_buffer[i] = 0;
 297   1        if(I == 0){ // just show zero
 298   2          return;
 299   2        }
C51 COMPILER V9.60.7.0   LED                                                               09/23/2024 15:26:19 PAGE 6   

 300   1      
 301   1        I = I/3600 * 10000 + ((I - (I/3600)*3600)/60)* 100 + (I - (I/60)*60);
 302   1        do{
 303   2          rem = I - (I/10)*10;
 304   2          display_buffer[N] = rem;
 305   2          I /= 10;
 306   2        }while(--N > -1 && I);
 307   1      }
 308          
 309          
 310          /**
 311           * displays digital point at position i
 312           * @param i - position to display DP, concequent calls can light up many DPs
 313           */
 314          void display_DP_at_pos(U8 i){
 315   1        if(i > 5) return;
 316   1        display_buffer[i] |= 0x80;
 317   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1781    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =     59    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
