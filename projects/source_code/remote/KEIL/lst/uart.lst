C51 COMPILER V9.60.7.0   UART                                                              09/08/2024 22:36:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Output\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\Library\StdDriver\src\uart.c LARGE OMF2 OPTIMIZE(1,SPEED) BR
                    -OWSE INCDIR(..\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\lst\uart.lst) TABS(2) OB
                    -JECT(.\Output\uart.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2023 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9          BIT PRINTFG, uart0_receive_flag, uart1_receive_flag;
  10          uint8_t uart0_receive_data, uart1_receive_data;
  11          
  12          #if 0
              /* UART0 interrupt vector demo */
              #if defined __C51__
              void Serial_ISR(void)  interrupt 4
              #elif defined __ICC8051__
              #pragma vector=0x23
              __interrupt void SerialPort0_ISR(void)
              #elif defined __SDCC__
              void Serial_ISR(void) __interrupt (4)
              #endif
              {
                  SFRS_TMP = SFRS;              /* for SFRS page */
                
                  if (RI)
                  {
                      uart0_receive_flag = 1;
                      uart0_receive_data = SBUF;
                      clr_SCON_RI;                                         // Clear RI (Receive Interrupt).
                  }
              
                  if (TI)
                  {
                      if (!PRINTFG)
                      {
                          TI = 0;
                      }
                  }
              
                  if (SFRS_TMP)                 /* for SFRS page */
                  {
                    ENABLE_SFR_PAGE1;
                  }
              }
              
              /* UART1 interrupt vector demo */
              #if defined __C51__
C51 COMPILER V9.60.7.0   UART                                                              09/08/2024 22:36:12 PAGE 2   

              void SerialPort1_ISR(void) interrupt 15
              #elif defined __ICC8051__
              #pragma vector=0x7B
              __interrupt void SerialPort1_ISR(void)
              #elif defined __SDCC__
              void SerialPort1_ISR(void) __interrupt (15)
              #endif
              void SerialPort1_ISR(void) __interrupt (15)
              {
                 SFRS_TMP = SFRS;              /* for SFRS page */
                
                  if (RI_1)
                  {
                      uart1_receive_data = SBUF_1;
                      uart1_receive_flag = 1;
                      clr_SCON_1_RI_1;                             /* clear reception flag for next reception */
                  }
              
                  if (TI_1 == 1)
                  {
                      if (!PRINTFG)
                      {
                          clr_SCON_1_TI_1;                             /* if emission occur */
                      }
                  }
              
                  if (SFRS_TMP)                 /* for SFRS page */
                  {
                    ENABLE_SFR_PAGE1;
                  }
              }
              #endif
  80          
  81          
  82            /**
  83            * @brief This API configures UART0 
  84            * @param[in] u32SysClock . Valid values as Fsys clock:
  85            *                       - \ref 24000000 means Internal HIRC 24MHz .
  86            * @param[in] u8UARTPort . Enabled UART port
  87            *                       - \ref UART0_Timer1
  88            *                       - \ref UART0_Timer3
  89            *                       - \ref UART1
  90            * @param[in] u32Baudrate . 
  91            *                       - \ref 115200
  92            *                       - \ref 200000
  93            * @note      None.
  94            * @exmaple : UART_Open(16600000,UART0_Timer1,115200);
  95            */
  96          void UART_Open(uint32_t u32SysClock, uint8_t u8UARTPort,uint32_t u32Baudrate)
  97          {
  98   1        switch(u8UARTPort)
  99   1        {
 100   2          case UART0_Timer1:
 101   2                SCON = 0x50;       //UART0 Mode1,REN=1,TI=1
 102   2                TMOD |= 0x20;      //Timer1 Mode1
 103   2                set_PCON_SMOD;          //UART0 Double Rate Enable
 104   2                set_CKCON_T1M;
 105   2                clr_T3CON_BRCK;          //Serial port 0 baud rate clock source = Timer1
 106   2                TH1 = 256 - (u32SysClock/16/u32Baudrate);
 107   2                set_TCON_TR1;
 108   2            break;
 109   2            
C51 COMPILER V9.60.7.0   UART                                                              09/08/2024 22:36:12 PAGE 3   

 110   2            case UART0_Timer3:
 111   2                SCON = 0x50;     //UART0 Mode1,REN=1,TI=1
 112   2                set_PCON_SMOD;        //UART0 Double Rate Enable
 113   2                T3CON &= 0xF8;   //T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1)
 114   2                set_T3CON_BRCK;        //UART0 baud rate clock source = Timer3
 115   2                RH3    = HIBYTE(65536 - (u32SysClock/16/u32Baudrate));  
 116   2                RL3    = LOBYTE(65536 - (u32SysClock/16/u32Baudrate));  
 117   2                set_T3CON_TR3;         //Trigger Timer3
 118   2            break;
 119   2            
 120   2            case UART1_Timer3:
 121   2                SCON_1 = 0x50;     //UART1 Mode1,REN_1=1,TI_1=1
 122   2                T3CON = 0x80;     //T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1), UART1 in MODE 1
 123   2                RH3    = HIBYTE(65536 - (u32SysClock/16/u32Baudrate));  
 124   2                RL3    = LOBYTE(65536 - (u32SysClock/16/u32Baudrate));     
 125   2                set_T3CON_TR3;             //Trigger Timer3
 126   2            break; 
 127   2        }
 128   1      }
 129          
 130          uint8_t Receive_Data(uint8_t UARTPort)
 131          {
 132   1          UINT8 c;
 133   1          switch (UARTPort)
 134   1          {
 135   2            case UART0:
 136   2              while (!RI);
 137   2              c = SBUF;
 138   2              RI = 0;
 139   2            break;
 140   2            case UART1:
 141   2              while (!RI_1);
 142   2              c = SBUF_1;
 143   2              RI_1 = 0;
 144   2            break;
 145   2          }
 146   1          return (c);
 147   1      }
 148          
 149          
 150            /**
 151            * @brief This API configures UART send byte 
 152            * @param[in] UARTPort . Valid values as Fsys clock:
 153            *                       - \ref UART0
 154            *                       - \ref UART1
 155            * @param[in] c . UART send HEX value
 156            *                       - \ref 0x55 
 157            * @note      None.
 158            * @exmaple : UART_Send_Data(UART0, 0x55);
 159            */
 160          void UART_Send_Data(uint8_t UARTPort, uint8_t c)
 161          {
 162   1          DISABLE_UART0_INTERRUPT;
 163   1          switch (UARTPort)
 164   1          {
 165   2            case UART0:
 166   2              SBUF = c;
 167   2              while(!TI);
 168   2              TI=0;
 169   2            break;
 170   2            case UART1:
 171   2              SBUF_1 = c;
C51 COMPILER V9.60.7.0   UART                                                              09/08/2024 22:36:12 PAGE 4   

 172   2              while(!TI_1);
 173   2              TI_1=0;
 174   2            break;
 175   2          }
 176   1          ENABLE_UART0_INTERRUPT;
 177   1      }
 178          
 179            /**
 180            * @brief This API configures UART0 printf function base on HIRC modify to 16.6MHz
 181            * @param[in]None 
 182            * @note      None.
 183            * @exmaple : Enable_UART0_VCOM_printf_166M_115200();
 184            */
 185          void Enable_UART0_VCOM_printf_166M_115200(void)
 186          {
 187   1          P06_QUASI_MODE;
 188   1          UART_Open(16600000,UART0_Timer1,115200);
 189   1          ENABLE_UART0_PRINTF;
 190   1          DISABLE_UART0_INTERRUPT;
 191   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    636    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
